//ff-mpirun -np 8 Helmholtz-2d-free-space-strips.edp -ns -wg -raspart -ffddm_schwarz_method oras -ffddm_partitioner 0 -nloc 20 -waven 20 -sigma 1 -ffddm_overlap 1 -ffddm_gmres_restart 500
// Use -ffddm_disable_plots for surpressing plots
// 
// If you have openmpi you may need to add the option --oversubscribe to allow more processes than the number of cores available on your computer

// *******************************************************************
// *                                                                 *
// *  Run this code using the syntax in the first line of this file  *
// *                                                                 *
// *******************************************************************

// Input parameters to vary:
// -nloc                  This is the (local) number of mesh spacings for each square subdomain in each direction. It should be a multiple of 5 to work with the meshing (default 10)
// -waven                 This is the wave number k (default 20)
// -sigma                 This is the conductivity parameter sigma. Note that larger sigma introduces more absorption into the problem (defualt 1)
// -np                    This is the number of processors and is used to vary the number of subdomains N, it must be specified in the manner above
//
// More flags that can be varied:
// -ffddm_overlap         This is a positive integer and represents the number of layers of elements included in the extension to the overlap giving a total overlap of twice the value (default 1)
// -ffddm_gmres_restart   The restart value of GMRES
// -seqddm N              Use this with -np 1 to run the code in sequential mode (which may be faster on a laptop). The number of subdomains N is then defined using this flag instead of via -np N

macro dimension 2// EOM            // 2D or 3D

include "ffddm.idp"

macro def(i)i// EOM                         // scalar field definition
macro init(i)i// EOM                        // scalar field initialization
func Pk = P1;

// Free space problem with strips and point sources every 8 subdomains (up until 64 subdomains)
// Problem parameters
real k = getARGV("-waven",20);
real sigma = getARGV("-sigma",1.);
func f = 100*(exp(-((x-.5)^2+(y-.5)^2)*k*10)+exp(-((x-8.5)^2+(y-.5)^2)*k*10)+exp(-((x-16.5)^2+(y-.5)^2)*k*10)+exp(-((x-24.5)^2+(y-.5)^2)*k*10)+exp(-((x-32.5)^2+(y-.5)^2)*k*10)+exp(-((x-40.5)^2+(y-.5)^2)*k*10)+exp(-((x-48.5)^2+(y-.5)^2)*k*10)+exp(-((x-56.5)^2+(y-.5)^2)*k*10));
// Boundary conditions
int Dirichlet = 1;
int Robin = 2;
int[int] chlab=[1, Robin, 2, Robin, 3, Robin, 4, Robin];
// Create mesh
int ncoarse = 5; // For initial coarse mesh
int nloc = getARGV("-nloc",20); // Should be a multiple of 5 (in general, a multiple of ncoarse)
mesh Thc = square(ffddmnpart*ncoarse,ncoarse,[ffddmnpart*x,y],flags=1);
Thc = change(Thc,refe=chlab);
mesh Th = trunc(Thc,1,split=ceil(nloc/real(ncoarse))); // Refine the coarse mesh to give the full mesh

// Uniform partitioning into strips (if using -ffddm_partitioner 0)
macro Hmeshsimple(Ph,upart,comm)
  int nn = ffddmnpart;
  Ph xx=x;
  upart = int(xx*nn)/nn;
// EOM

macro Grad(u) [dx(u),dy(u)] // EOM

// Variational forms:
macro Varf(varfName, meshName, PhName)
    varf varfName(u,v) =
  intN(meshName)(-(k^2-1i*k*sigma)*u*v+Grad(u)'*Grad(v))
				+ intbN(meshName,Robin)(1i*k*u*v)
				+ on(Dirichlet,u=0); // EOM

// for the preconditioner
macro VarfOpt(varfName, meshName, PhName)
    varf varfName(u,v) =
  intN(meshName)(-(k^2-1i*k*sigma)*u*v+Grad(u)'*Grad(v))
				+ intbN(meshName,Robin,10)(1i*k*u*v)
				+ on(Dirichlet,u=0); // EOM

macro Varfrhs(varfName, meshName, PhName)
    varf varfName(u,v) =
                - intN(meshName)(f*v)
                + on(Dirichlet,u=0); // EOM

ffddmbuildDmesh(Hmesh,Th,mpiCommWorld)

if (mpiRank(Hmeshmpicomm) == 0)
  {
    cout << "Some ffddm options used:" << endl;
    cout << "  ffddmoverlap = " << ffddmoverlap << endl;
    cout << "  ffddmpartitioner = " << ffddmpartitioner << endl;
    cout << "  ffddmprecond = " << ffddmprecond << endl;
  }

ffddmbuildDfespace(HFE,Hmesh,complex,def,init,Pk)
ffddmsetup(H,HFE,Varf,VarfOpt)

complex[int] rhs(1);
ffddmbuildrhs(H,Varfrhs,rhs)

complex[int] x0(rhs.n);
x0 = 0;

HFEVhi<complex> def(u), def(err);

if (mpirank == 0) cout << "ONE-LEVEL:" << endl;

u[] = HfGMRES(x0, rhs, 1.e-6, 1000, "right");

Hwritesummary

ffddmplot(HFE,real(u), "Global solution");
